pipeline {
     agent any
     environment {
        RunTests = "True"
        TestsRunSuccessfully = "True"
        UserKeyOrchID = credentials('userkeyOrch')
    }
     stages {
         stage('Initialize the variables') {
             steps{
                 script{
                     PROCESS_OUTPUT_PATH = "${WORKSPACE}\\Process\\Output\\${BUILD_NUMBER}"
                     TEST_OUTPUT_PATH = "${WORKSPACE}\\test-reports"
                     ASSETS_FILE_PATH = "${WORKSPACE}\\assets.csv"
                 }
             }               
         }
         stage('Queue Configuration') {
            when {
                equals expected : 'True', actual: TestsRunSuccessfully
            }
             steps {
                 echo 'Queue Configuration'
                 withCredentials([string(credentialsId: 'userkeyOrch', variable: 'userKeyOrch')]) {
                 powershell '''param(
                                $AccountName="aitraining",
                                $ClientId="8DEv1AMNXczW3y4U15LL3jYf62jK93n5",
                                $TenantName="UiPathDefault",
                                $ConfigFile = ".\\ConfigurationCSV.csv",
                                $OrcUserKey = "$($env:UserKeyOrchID)",
                                $CloudDeployment = "Cloud"
                               )
                            
                            Write-Output "$(Get-Date -Format \'HH:mm:ss\') - STARTED - Queue Configuration"
                            Write-Output $ConfigFile
                            if (Get-Module | Where-Object {$_.Name -eq "UiPath.Powershell"}) 
                            {
                                write-host "UiPath.Pwershell Module is already imported."
                            }
                            else 
                            {
                                # If module is not imported, but available on disk then import
                                if (Get-Module -ListAvailable | Where-Object {$_.Name -eq "UiPath.Powershell"}) {
                                    Import-Module UiPath.Powershell
                                }
                                else {
                                    Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
                                    Register-PSRepository -Name UiPath -SourceLocation https://www.myget.org/F/uipath-dev/api/v2
                                    Install-Module -Repository UiPath -Name UiPath.Powershell -Force -Scope CurrentUser
                                    Import-Module UiPath.PowerShell
                                }
                            }
                            
                            
                            
                            $authtoken = Get-UiPathAuthToken -Session -AccountName $AccountName -ClientId $ClientId -TenantName $TenantName -UserKey  $OrcUserKey -CloudDeployment $CloudDeployment
                            
                            $QueueList = Import-Csv $ConfigFile
                            
                            foreach ($Queue in $QueueList) {
                                $QueueName = $Queue.QueueName
                                $Description = $Queue.Description
                                [bool]$EnforceUniqueRef = [bool]$Queue.EnforceUniqueRef
                                [bool]$AutoRetry = [bool]$Queue.AutoRetry
                                $MaxRetry = [int32]$Queue.MaxRetry
                                $TimeOut = [int32]$Queue.TimeOut
                                $FolderName = $Queue.FolderName
                                
                                Set-UiPathCurrentFolder -FolderPath $FolderName -AuthToken $authtoken
                                
                                 try
                                {
                                    if ($AutoRetry -and $EnforceUniqueRef)
                                    {
                                        Add-UiPathQueueDefinition -Name $QueueName -AcceptAutomaticallyRetry -AuthToken $authtoken -Description $QueueDescription  -EnforceUniqueReference -MaxNumberOfRetries $MaxRetry -RequestTimeout $TimeOut
                                    }
                                    elseif ( -not $AutoRetry -and -not $EnforceUniqueRef)
                                    {
                                        Add-UiPathQueueDefinition -Name $QueueName -AuthToken $authtoken -Description $QueueDescription -MaxNumberOfRetries $MaxRetry -RequestTimeout $TimeOut
                                    }
                                    elseif ( -not $AutoRetry -and  $EnforceUniqueRef)
                                    {
                                        Add-UiPathQueueDefinition -Name $QueueName -AuthToken $authtoken -Description $QueueDescription  -EnforceUniqueReference -MaxNumberOfRetries $MaxRetry -RequestTimeout $TimeOut
                                    }
                                    else
                                    {
                                        Add-UiPathQueueDefinition -Name $QueueName -AcceptAutomaticallyRetry -AuthToken $authtoken -Description $QueueDescription  -MaxNumberOfRetries $MaxRetry -RequestTimeout $TimeOut
                                    }
                                }
                                catch 
                                {
                                    # skip exception if queue is already defined in orchestrator
                                    if ( -not $PSItem.Exception.Message -contains "is already used" )
                                    {
                                        exit 1
                                    }
                                    Write-Output "Queue already defined"
                                }
                            }
                            Write-Output "$(Get-Date -Format \'HH:mm:ss\') - COMPLETED - Queue Configuration"'''
                }
             }
         }   
     }
 }
